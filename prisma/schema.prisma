generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String? @unique
  email    String  @unique
  password String
  role     Role    @default(READER) // 3 roles: READER, ARTIST, ADMIN
  plan     Plan    @default(FREE)

  comicsFav Comic[]  @relation("UserFavorites") // o usuário pode ter comics favoritas 
  artist    Artist?  // um usuário pode não ser artista

  coCreatedComics Comic[] @relation("CoCreators")

  profileImage Image? @relation("UserProfileImage") // Foto de perfil do usuário
}

model Artist {
  id        String  @id @default(uuid())
  biography String
  comics    Comic[] // o artista vai publicar comics

  // Foreign key, vinculando um User com um Artist - conta de artista
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Comic {
  id                Int      @id @default(autoincrement())
  title             String
  isOriginalTum     Boolean

  // Co-criadores da Comic
  coCreators        User[]   @relation("CoCreators")

  artist            String?  @default("") // Nome do artista (opcional)
  author            String?  @default("") // Nome do autor (opcional)

  genre             String   // Gênero principal
  genreSecond       String?  @default("") // Gênero secundário (opcional, vazio por padrão)

  dayChapterRelease String?  // Dia de lançamento de capítulos

  synopsis          String   @db.VarChar(2000) // Sinopse (limite de 2000 caracteres)

  views             Int      @default(0) // Contador de visualizações (inicia em 0)

  // Relacionamento com o artista que publicou a Comic
  artistId          String
  artistOwner       Artist   @relation(fields: [artistId], references: [id])

  usersFav User[] @relation("UserFavorites")

  // Imagens associadas à Comic (banner, thumbnails, etc.)
  images Image[] @relation("ComicImages")
}

model Image {
  id       String  @id @default(uuid())
  url      String  @unique // URL pública da imagem no S3
  path     String  @unique // Caminho do arquivo no S3 (ex: uploads/profile/abc123.jpg)
  type     ImageType // Tipo da imagem (PROFILE, COMIC_BANNER, COMIC_THUMBNAIL, etc.)
  mimeType String
  size     Int
  width    Int?
  height   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos opcionais (a imagem pode ser de um usuário ou de uma comic)
  userId  String? @unique // Se for imagem de perfil
  user    User?   @relation("UserProfileImage", fields: [userId], references: [id])

  comicId Int? // Se for imagem de comic
  comic   Comic? @relation("ComicImages", fields: [comicId], references: [id])
}

enum ImageType {
  PROFILE
  COMIC_BANNER
  COMIC_THUMBNAIL
  OTHER
}

enum Role {
  READER
  ARTIST
  ADMIN
}

enum Plan {
  FREE
  BASIC
  BUSINESS
  ENTERPRISE
}
