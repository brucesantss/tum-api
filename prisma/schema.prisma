// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String? @unique
  email    String  @unique
  password String
  role     Role    @default(READER) //3 roles, READER; ARTIST; ADMIN;
  plan     Plan    @default(FREE)

  comicsFav Comic[]  @relation("UserFavorites") // o usuário pode ter comics favoritas 
  artist    Artist? // um usuário pode não ser artista

  coCreatedComics Comic[] @relation("CoCreators")
}

model Artist {
  id        String  @id @default(uuid())
  biography String
  comics    Comic[] //o artista vai publicar comics

  // foreing key, vinculando um User com um Artist - conta de artista
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Comic {
  id                Int      @id @default(autoincrement())
  title             String
  isOriginalTum     Boolean

  // Co-criadores da Comic
  coCreators        User[]   @relation("CoCreators")

  artist            String?  @default("") // Nome do artista (opcional)
  author            String?  @default("") // Nome do autor (opcional)

  genre             String   // Gênero principal
  genreSecond       String?  @default("") // Gênero secundário (opcional, vazio por padrão)

  dayChapterRelease String?  // Dia de lançamento de capítulos

  synopsis          String   @db.VarChar(2000) // Sinopse (limite de 2000 caracteres)

  banner            String?  // Imagem do banner da Comic
  thumbnail         String?  // Miniatura da Comic

  views             Int      @default(0) // Contador de visualizações (inicia em 0)

  // Relacionamento com o artista que publicou a Comic
  artistId          String
  artistOwner       Artist   @relation(fields: [artistId], references: [id])

  usersFav  User[]   @relation("UserFavorites")

}


// roles do TUM
enum Role {
  READER
  ARTIST
  ADMIN
}

enum Plan {
  FREE
  BASIC
  BUSINESS
  ENTERPRISE
}
